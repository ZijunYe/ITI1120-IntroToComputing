{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fnil\fcharset0 LucidaGrande;\f2\fnil\fcharset134 STSongti-SC-Regular;
}
{\colortbl;\red255\green255\blue255;\red243\green235\blue10;\red0\green0\blue0;\red255\green249\blue89;
}
{\*\expandedcolortbl;;\cssrgb\c96264\c92423\c0;\csgray\c0\c0;\cssrgb\c100000\c96976\c42052;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww14660\viewh6240\viewkind0
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\f0\fs36 \cf0 {\listtext	1.	}input only allow \cb2 1\cb1  argument, using plus sign (+) to concatenate to produce new string \
{\listtext	2.	}input from user, the value returns always be string \
{\listtext	3.	}calculator of python \
\pard\tx940\tx1440\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}x%y \'97>mod return a reminder (x%y=x-(x//y)*y\
{\listtext	
\f1 \uc0\u8259 
\f0 	}x//y \'97>div  return a integer \
{\listtext	
\f1 \uc0\u8259 
\f0 	}round(float) \'97> output is integer . When decimal is 0.5: if int is odd, plus 1; if int is even, no change \
{\listtext	
\f1 \uc0\u8259 
\f0 	}int(float) \'97> remove all decimal \
{\listtext	
\f1 \uc0\u8259 
\f0 	}math.ceil() \'97> up to biggest int\
{\listtext	
\f1 \uc0\u8259 
\f0 	}math.floor()\'97> down to smallest int \
{\listtext	
\f1 \uc0\u8259 
\f0 	}math.log(x, base) \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 4. True and False the capital at condition \
5.  Each string all has \'93 \'93 // \'91 \'91 \
\cb3 6. object \cb1 \
Don\'92t forget to write \'91self\'92  in each function with in the object \
	class object_name():\
		def function_name(self):\
			body \
Calling in object \'97> function_name()\
\cb4 7. Slicing & Range 
\f2 \'d2\'d7\'b4\'ed\'b5\'e3\'a3\'a1\'a3\'a1
\f0 \cb3 \

\f2 \'c8\'e7\'b9\'fb\'cf\'eb\'d2\'aa
\f0 count down set list/string[::-1] \
List/string[-2:] \'97> return last two items in the array \
List/string[:-2] \'97> return everything except last two \
List/string[::-1]\'97> return reverse, all items in the array \
List/string[1::-1]\'97> only the first two items reversed \
List/string[:-3:-1] \'97> the last two items, revered \
\
range(5,-1,-1)\'97> begin at 5, end with -1\'97> 5,4,3,2,1\
\
8. List and object has aliasing \
If one got change, another one change too \
\
9. ** is square , ^ isn\'92t \
\
10. List can be inside of list \'97> 2D list \
list[out index][inside index]\
\
11. \'91Is\'92 \'97> compare address //  \'91==\'91 compare content \
\
12. List.append(x) // list.sort() can\'92t assign to new variable \
\
13. Range out of index len(s) -1 \
\
14. To solve even / odd number by increment can use plus/ minus \
Ex. i =5 # only work for odd number \
	while \'85: \
		i = i+2 # step to odd number 7,9,11\'85\
\
15. list=[] != list=[None]\
None is undetermined \
So if want set the more index in list, use None \
\
16. Tab character \'91\\t\'92 // newline character \'91\\n\'92 \
\
17. Can not directly convert list<str> \'97> list<int>\
\
18. After loop done, the last value will sign to I \
\
19. List can only concatenated with list \
list[]+list[] \
\
list(string) \'97>works for string\
list(int) \'97>doesn\'92t work \
\
20. [1]* 10 =[1,1,1,1,1,1,1]-> without extra list \
\
21. 
\f2 \'b7\'b2\'ca\'c7\'d4\'da
\f0 while loop 
\f2 \'d6\'d0
\f0  *2 or //2; the operation 
\f2 \'b6\'bc\'ce\'aa
\f0  log n\
ex.1 
\f2 def foo1 (n): #O(logn)\
		 x=1\
		while x<n:\
			x=x*2\
ex.2 def foo2(n): #O(logn)\
		x=n\
		while x>=1:\
			x=x//2\
ex.3 def foo3(n): #O(n*logn)\
	 for x in range(n):\
		j=x\
		while j>=1:\
			j=j//2
\f0 \
\
22. How to do backwards? \
For loop : range(len(s)-1,-1,-1)\
While loop: i=len(s)-1 \
			while condition :\
				i = i -1\
\
\
23. If key is string, should add \'93\'94 \
\
24. a=[1,2,3,4,5,6,7,8,9]\
a[::2] \'97> return a list [1,3,6,9]\
\
25. Remember test case 0 value! Always! \
Division can\'92t be zero !!! X/0 doesn\'92t work !!!\
\
26. Int can\'92t using slicing and len!!!\
\
27. set the default to the Object init \
\
\
\
\cb1 \
\
}